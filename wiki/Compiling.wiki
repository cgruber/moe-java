#DEPRECATED
Java-MOE now packages the external dependences in lib/. 
A build.xml and README describing how to compile, run, and test Java-MOE can be found in the project trunk.
Alternatively, a precompiled .jar can be found on the Downloads page.


#summary How to compile MOE-java


= Dependencies =
 * args4j ( http://java.net/projects/args4j/ )
 * gson ( http://code.google.com/p/google-gson/ )
 * guava ( http://code.google.com/p/guava-libraries/ )

= Using Ant to compile MOE =
If you do not have the dependencies installed and added to your classpath, you may wish to follow these instructions to set up an Ant buildfile.

== Steps ==
To compile using Ant:
 # Install `Ant` by either downloading it from the website ( http://ant.apache.org/ ) or installing it using your operating systems package manager.
 # Download the source of MOE using svn
 # Download `jar` files of the dependencies listed above, and put them into a directory called `lib` in the same folder as your source code
 # Copy and paste the Ant buildfile listed below into a `build.xml` file into the folder with the MOE source code, so that it is at the same level as `src` and the newly created `lib` folder
 # Run `ant compile` to compile MOE

== build.xml ==
{{{
<project name="moe-java" basedir="." default="compile">
  <target name="compile">
    <mkdir dir="build" />
    <javac srcdir="src" destdir="build">
      <classpath>
        <fileset dir="lib">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </javac>
  </target>
</project>
}}}

== moe.sh ==
If you followed the above steps to compile MOE and use a Unix-like OS, you may want to make a simple script to run MOE. Copy and paste the following into an executable file `moe.sh`:
{{{
#!/bin/bash
java -cp build:lib/* com.google.devtools.moe.client.Moe $@
}}}

Try `moe.sh hello` to test that everything works!